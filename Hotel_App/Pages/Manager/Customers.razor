@page "/customers"
@using Hotel_App.Service
@using Hotel_App.Data
@using Blazored.LocalStorage
@using Hotel_App.Shared
@inject HotelService<KhachHang> khservice;
@inject HotelService<DatPhong> dpservice;


<div class="col-12">
    <h3><b>Enter Author Information</b></h3>
    <hr />


    <form>
        <div class="form-group">
            <label for="MaKhachHang">Mã Khách Hàng:</label>
            <input type="text" class="form-control" id="MaKhachHang" name="MaKhachHang" readonly>
        </div>

        <div class="form-group">
            <label for="HoTen">Tên Khách Hàng:</label>
            <input type="text" class="form-control" id="HoTen" name="HoTen">

        </div>

        <div class="form-group">
            <label for="SoDienThoai">Số Điện Thoại:</label>
            <input type="text" class="form-control" id="SoDienThoai" name="SoDienThoai">
        </div>

        <div class="form-group">
            <label for="NgaySinh">Ngày Sinh:</label>
            <input type="text" class="form-control" id="NgaySinh" name="NgaySinh">
        </div>

        <div class="form-group">
            <label for="CCCD">CCCD:</label>
            <input type="text" class="form-control" id="CCCD" name="CCCD">
        </div>

        <div class="form-group">
            <label for="STK">Địa Chỉ:</label>
            <input type="text" class="form-control" id="STK" name="STK">
        </div>
        <div class="form-group">
            <label for="MaTaiKhoan">Mã Tài Khoản:</label>
            <input type="text" class="form-control" id="MaTaiKhoan" name="MaTaiKhoan" readonly>
        </div>


        <button type="submit" class="btn btn-primary">Tạo</button>
    </form>
</div>
<br />
<div class="col-12">

    <h3>Khách Hàng</h3>
    <SpinLoader IsLoading="isLoading">
        <LoadingTemplate>
            <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                <br /><br />
                <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            @if (customers == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <table class="styled-table">
                    <thead>
                        <tr style="background-color: #e0f7fa; color: #0077b6; text-align: center; border: 1px solid #dddddd;">
                            <th style="border: 1px solid #dddddd;">Mã Khách Hàng</th>
                            <th style="border: 1px solid #dddddd;">Tên Khách Hàng</th>
                            <th style="border: 1px solid #dddddd;">Số điện thoại</th>
                            <th style="border: 1px solid #dddddd;">Email</th>
                            <th style="border: 1px solid #dddddd;">Ngày Sinh</th>
                            <th style="border: 1px solid #dddddd;">CCCD</th>
                            <th style="border: 1px solid #dddddd;">Số Tài Khoản</th>
                            <th style="border: 1px solid #dddddd;">Mã Tài Khoản</th>
                            <th style="border: 1px solid #dddddd;"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var kh in customers)
                        {
                            <tr style="border: 1px solid #dddddd;">
                                <td style="border: 1px solid #dddddd;">@kh.MaKhachHang</td>
                                <td style="border: 1px solid #dddddd;">@kh.HoTen</td>
                                <td style="border: 1px solid #dddddd;">@kh.SoDienThoai</td>
                                <td style="border: 1px solid #dddddd;">@kh.Email</td>
                                <td style="border: 1px solid #dddddd;">@kh.NgaySinh</td>
                                <td style="border: 1px solid #dddddd;">@kh.CCCD</td>
                                <td style="border: 1px solid #dddddd;">@kh.STK</td>
                                <td style="border: 1px solid #dddddd;">@kh.MaTaiKhoan</td>
                                <td style="border: 1px solid #dddddd;">
                                    <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => EditCustomers(kh))">Edit</a> |
                                    <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteCustomers(kh.MaKhachHang))">Delete</a>
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>
            }
        </ContentTemplate>
    </SpinLoader>
</div>
@code {
    private IEnumerable<HoaDon> bills;
    private IEnumerable<DatPhong> reservations;
    private IEnumerable<KhachHang> customers;
    private IEnumerable<PhuongThucThanhToan> methods;
    public KhachHang customer { get; set; }
    public IEnumerable<HoaDon> filteredAuthorList { get; set; }
    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = true;

    protected async Task LoadCustomers()
    {
        customers = await khservice.GetAllAsync("https://localhost:44359/api/Customers/GetCustomers");
    }
    protected override void OnInitialized()
    {
        Console.WriteLine("Authors - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Authors - OnInitializedAsync");

        customer = new KhachHang();
        //authorList = await authorService.GetAuthors();

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Authors - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Authors - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("Authors - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {

            await LoadCustomers();

            isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("Authors - Dispose");
    }
    private async Task DeleteCustomers(int Id)
    {
        // await BillService.DeleteAsync("authors/DeleteAuthor/", Id);
        // await LoadEmployees();

        // throw new Exception("DeleteAuthor");
    }

    private void EditCustomers(KhachHang argAuthor)
    {
        // employees = argAuthor;
    }
    private void SaveBill(HoaDon bill)
    {

    }
    /* protected async Task LoadReservations()
         {
         reservations = await dpservice.GetAllAsync("https:localhost:44359/api/DatPhong/GetDatPhong");
     }
     protected async Task LoadEmployees()
         {
         employees = await nvservice.GetAllAsync("https:localhost:44359/api/NhanVien/GetNhanVien");
     }
     protected async Task LoadMethods()
         {
         methods = await ptservice.GetAllAsync("https:localhost:44359/api/PTTT/GetPTTT");
    }*/
}

