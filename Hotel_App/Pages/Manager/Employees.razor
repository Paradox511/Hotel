@page "/employees"
<h3>Employees</h3>
@using Hotel_App.Service
@using Hotel_App.Data
@using Blazored.LocalStorage
@using Hotel_App.Shared
@inject HotelService<HoaDon> BillService
@inject HotelService<DatPhong> dpservice;
@inject HotelService<NhanVien> nvservice;
@inject HotelService<PhuongThucThanhToan> ptservice;
@implements IDisposable


<div class="col-12">
    <h3><b>Enter Author Information</b></h3>
    <hr />


    <form>
        <div class="form-group">
            <label for="MaNhanVien">Mã Nhân Viên:</label>
            <input type="text" class="form-control" id="MaNhanVien" name="MaNhanVien" readonly>
        </div>

        <div class="form-group">
            <label for="TenNhanVien">Tên Nhân Viên:</label>
            <input type="text" class="form-control" id="TenNhanVien" name="TenNhanVien">
            
        </div>

        <div class="form-group">
            <label for="SoDienThoai">Số Điện Thoại:</label>
            <input type="text" class="form-control" id="SoDienThoai" name="SoDienThoai">
        </div>

        <div class="form-group">
            <label for="Email">Email:</label>
            <input type="text" class="form-control" id="Email" name="Email">
        </div>

        <div class="form-group">
            <label for="DiaChi">Địa Chỉ:</label>
            <input type="text" class="form-control" id="DiaChi" name="DiaChi">
        </div>

        

        <button type="submit" class="btn btn-primary">Tạo</button>
    </form>
</div>
<br />
<div class="col-12">

    <h3>Nhân Viên</h3>
    <SpinLoader IsLoading="isLoading">
        <LoadingTemplate>
            <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                <br /><br />
                <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            @if (employees == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <table>
                    <thead>
                        <tr>
                            <th>Mã Nhân Viên</th>
                            <th>Tên Nhân Viên</th>
                            <th>Số điện thoại</th>
                            <th>Email</th>
                            <th>Địa Chỉ</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var nv in employees)
                        {
                            <tr>
                                <td>@nv.MaNhanVien</td>
                                <td>@nv.HoTen</td>
                                <td>@nv.SoDienThoai</td>
                                <td>@nv.Email</td>
                                <td>@nv.DiaChi</td>
                                <td>
                                    <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => EditEmployees(nv))">Edit</a> |
                                    <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteEmployees(nv.MaNhanVien))">Delete</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </ContentTemplate>
    </SpinLoader>
</div>
@code {
    private IEnumerable<HoaDon> bills;
    private IEnumerable<DatPhong> reservations;
    private IEnumerable<NhanVien> employees;
    private IEnumerable<PhuongThucThanhToan> methods;
    public NhanVien employee { get; set; }
    public IEnumerable<HoaDon> filteredAuthorList { get; set; }
    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = true;

    protected async Task LoadEmployees()
    {
        employees = await nvservice.GetAllAsync("https://localhost:44359/api/NhanVien/GetNhanVien");
    }
    protected override void OnInitialized()
    {
        Console.WriteLine("Authors - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Authors - OnInitializedAsync");

        employee = new NhanVien();
        //authorList = await authorService.GetAuthors();

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Authors - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Authors - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("Authors - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            
            await LoadEmployees();

            isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("Authors - Dispose");
    }
    private async Task DeleteEmployees(int Id)
    {
        // await BillService.DeleteAsync("authors/DeleteAuthor/", Id);
        // await LoadEmployees();

        // throw new Exception("DeleteAuthor");
    }

    private void EditEmployees(NhanVien argAuthor)
    {
       // employees = argAuthor;
    }
    private void SaveBill(HoaDon bill)
    {

    }
   /* protected async Task LoadReservations()
    {
        reservations = await dpservice.GetAllAsync("https:localhost:44359/api/DatPhong/GetDatPhong");
    }
    protected async Task LoadEmployees()
    {
        employees = await nvservice.GetAllAsync("https:localhost:44359/api/NhanVien/GetNhanVien");
    }
    protected async Task LoadMethods()
    {
        methods = await ptservice.GetAllAsync("https:localhost:44359/api/PTTT/GetPTTT");
    }*/
}
