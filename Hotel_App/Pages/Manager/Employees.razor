@page "/employees"
@using Hotel_App.Service
@using Hotel_App.Data
@using Blazored.LocalStorage
@using Hotel_App.Shared
@inject HotelService<HoaDon> BillService
@inject HotelService<DatPhong> dpservice;
@inject HotelService<NhanVien> nvservice;
@inject HotelService<PhuongThucThanhToan> ptservice;
@implements IDisposable


<div class="col-12">
    <h3><b>Thông Tin Nhân Viên</b></h3>
    <hr />
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    @if (showDeleteConfirmation)
    {
        <div class="modal" style="display:block; background-color: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog" style="max-width: 400px; margin-top: 150px;">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Deletion</h5>
                        <button type="button" class="close" @onclick="CancelDelete">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this customer?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="CancelDelete">No</button>
                        <button class="btn btn-danger" @onclick="DeleteEmployees">Yes</button>
                    </div>
                </div>
            </div>
        </div>
    }
    <EditForm Model="@employee" OnValidSubmit="@CreateEmployees">
        <div class="form-group">
            <label for="MaNhanVien">Mã Nhân Viên:</label>
            <input type="text" class="form-control" id="MaNhanVien" @bind="employee.MaNhanVien" name="MaNhanVien" readonly>
        </div>

        <div class="form-group">
            <label for="TenNhanVien">Tên Nhân Viên:</label>
            <input type="text" class="form-control" id="TenNhanVien" @bind="employee.HoTen" name="TenNhanVien">

        </div>

        <div class="form-group">
            <label for="SoDienThoai">Phone Number:</label>
            <input type="text" class="form-control" id="SoDienThoai" @bind="employee.SoDienThoai" name="SoDienThoai" required />
            @if (!string.IsNullOrEmpty(phoneError))
            {
                <span class="text-danger">@phoneError</span>
            }
        </div>

        <div class="form-group">
            <label for="Email">Email:</label>
            <input type="text" class="form-control" id="Email" @bind="employee.Email" name="Email" required />
            @if (!string.IsNullOrEmpty(emailError))
            {
                <span class="text-danger">@emailError</span>
            }
        </div>

        <div class="form-group">
            <label for="DiaChi">Địa Chỉ:</label>
            <input type="text" class="form-control" id="DiaChi" @bind="employee.DiaChi" name="DiaChi">
        </div>

        <div class="form-group">
            <label for="Password">Password:</label>
            <input type="text" class="form-control" id="Password" @bind="employee.Password" name="Password">
        </div>
        <br />
        <button type="submit" class="btn btn-primary ">Tạo</button>
    </EditForm>
</div>
<br />
<hr />
<div class="col-12">

    <h3><b>Danh Sách Nhân Viên</b></h3>
    <button class="btn btn-primary" @onclick="LoadEmployees">Refresh</button>
    <br />
    <SpinLoader IsLoading="isLoading">
        <LoadingTemplate>
            <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                <br /><br />
                <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            @if (employees == null)
            {
                <p>Loading...</p>
            }
            else
            {
                @if (filteredEmployees != null)
                {
                    <!-- Search Box -->
                    <div class="search-box">
                        <b><label class="col-2 font-weight-bold">Search:</label></b>
                        <input type="text" class="form-control col-3" @bind="searchText" @oninput="OnSearchTextChanged" placeholder="Search employees" />
                    </div>
                    <table class="table table-bordered table-striped table-responsive-md">
                        <thead>
                            <tr>
                                <th>Mã Nhân Viên</th>
                                <th>Tên Nhân Viên</th>
                                <th>Số điện thoại</th>
                                <th>Email</th>
                                <th>Địa Chỉ</th>
                                <th>Password</th>
                                <th>Thao Tác</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var nv in filteredEmployees)
                            {
                                <tr>
                                    <td>@nv.MaNhanVien</td>
                                    <td>@nv.HoTen</td>
                                    <td>@nv.SoDienThoai</td>
                                    <td>@nv.Email</td>
                                    <td>@nv.DiaChi</td>
                                    <td>@nv.Password</td>
                                    <td class="action-links">
                                        <a class="edit-link" @onclick="(() => EditEmployees(nv))">Edit</a> |
                                        <a class="delete-link" @onclick="(() => ShowDeleteConfirmation(nv.MaNhanVien))">Delete</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="pagination-controls">
                        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage()">Previous</button>
                        <span>Page @currentPage of @totalPages</span>
                        <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage()">Next</button>
                    </div>

                }
                else
                {
                    <p>No employees found.</p>
                }


                <style>
                    /* Action links style */
                    .action-links {
                        display: flex;
                        gap: 10px;
                    }

                    table {
                        width: 100%;
                        border-collapse: collapse;
                        margin: 20px 0;
                        font-size: 16px;
                        text-align: left;
                    }

                    thead tr {
                        background-color: #06163C;
                        color: white;
                    }

                    th, td {
                        padding: 12px 15px;
                        border: 1px solid #ddd;
                    }

                    tbody tr:nth-child(even) {
                        background-color: #f2f2f2;
                    }

                    tbody tr:hover {
                        background-color: #f1f1f1;
                    }

                    a {
                        text-decoration: none;
                        color: blue;
                        font-weight: bold;
                    }

                        a:hover {
                            text-decoration: underline;
                            color: darkblue;
                        }

                    /* Search bar styling */
                    .search-bar {
                        margin-bottom: 20px;
                        display: flex;
                        gap: 10px;
                        align-items: center;
                    }

                        .search-bar input[type="text"] {
                            width: 300px;
                            padding: 8px;
                            font-size: 16px;
                            border: 1px solid #ddd;
                            border-radius: 4px;
                        }

                        .search-bar button {
                            padding: 8px 15px;
                            font-size: 16px;
                            color: white;
                            background-color: #4CAF50;
                            border: none;
                            border-radius: 4px;
                            cursor: pointer;
                        }

                            .search-bar button:hover {
                                background-color: #45a049;
                            }

                    /* Style for the search bar */
                    .search-bar {
                        margin-bottom: 20px;
                        display: flex;
                        gap: 10px;
                        align-items: center;
                    }

                        .search-bar input[type="text"] {
                            width: 300px;
                            padding: 8px;
                            font-size: 16px;
                            border: 1px solid #ddd;
                            border-radius: 4px;
                        }

                        .search-bar button {
                            padding: 8px 15px;
                            font-size: 16px;
                            color: white;
                            background-color: #4CAF50;
                            border: none;
                            border-radius: 4px;
                            cursor: pointer;
                        }

                            .search-bar button:hover {
                                background-color: #45a049;
                            }

                    /* Action link color changes */
                    .edit-link {
                        color: blue;
                        cursor: pointer;
                    }

                        .edit-link:hover {
                            text-decoration: underline;
                        }

                    .delete-link {
                        color: red;
                        cursor: pointer;
                    }

                        .delete-link:hover {
                            text-decoration: underline;
                        }

                    .pagination-controls {
                        display: flex;
                        justify-content: center;
                        gap: 10px;
                        margin-top: 20px;
                    }

                        .pagination-controls button {
                            padding: 8px 15px;
                            font-size: 16px;
                            border-radius: 4px;
                        }

                        .pagination-controls span {
                            font-size: 16px;
                            align-self: center;
                        }

                </style>


            }
        </ContentTemplate>
    </SpinLoader>
</div>
@code {

    private IEnumerable<NhanVien> employees;
    private IEnumerable<HoaDon> bills;
    public HoaDon hd { get; set; }
    public NhanVien employee { get; set; }
    public IEnumerable<NhanVien> filteredEmployees { get; set; }
    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = true;
    private string searchText = string.Empty;
    private List<Employees> lemployees = new List<Employees>();
    // Error messages for validation
    private string emailError;
    private string phoneError;
    // Success and error messages for operations
    private string successMessage;
    private string errorMessage;
    // Email validation regex
    private readonly string emailPattern = @"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$";
    // Phone validation regex
    private readonly string phonePattern = @"^\d{10}$";
    private int currentPage = 1;
    private int itemsPerPage = 5; // Change this number based on your preference
    private int totalEmployees = 0;
    private int totalPages => (int)Math.Ceiling((double)employees.Count() / itemsPerPage);
    // private int totalPages => (int)Math.Ceiling((double)filteredEmployees.Count() / itemsPerPage);
    private bool IsFirstPage() => currentPage == 1;
    private bool IsLastPage() => currentPage == totalPages;
    private string deleteMessage;
    private bool showDeleteConfirmation = false;
    private int employeesIdToDelete;

    // Tải danh sách nhân viên từ API
    protected async Task LoadEmployees()
    {
        isLoading = true;
        LoadBills();

        try
        {
            // Fetch all employees (no filtering applied yet)
            var allEmployees = await nvservice.GetAllAsync("https://localhost:44359/api/NhanVien/GetNhanVien");

            employees = allEmployees; // Store all employees for search filtering later
            filteredEmployees = employees; // Initially, no filtering
            totalEmployees = employees.Count(); // Get the total count for pagination

            // Apply pagination to the employees
            PaginateEmployees();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine("Error loading employees: " + ex.Message);
        }

        isLoading = false;
        StateHasChanged(); // Update the UI
    }



    // Phương thức tìm kiếm
    private void OnSearchTextChanged(ChangeEventArgs e)
    {
        string searchValue = e.Value.ToString().ToLower();

        // Lọc danh sách theo tất cả các trường dữ liệu
        filteredEmployees = employees.Where(emp =>
            emp.MaNhanVien.ToString().Contains(searchValue) ||
            emp.HoTen.ToLower().Contains(searchValue)
        ).ToList();

        totalEmployees = filteredEmployees.Count(); // Cập nhật tổng số lượng nhân viên sau khi lọc
        currentPage = 1; // Reset về trang đầu tiên

        // Áp dụng phân trang cho danh sách đã lọc
        filteredEmployees = filteredEmployees
        .Skip((currentPage - 1) * itemsPerPage)
        .Take(itemsPerPage)
        .ToList();
        StateHasChanged(); // Cập nhật lại giao diện
    }

    private async Task CreateEmployees()
    {
        // Kiểm tra định dạng email và số điện thoại
        if (!ValidateEmail(employee.Email))
        {
            errorMessage = "Email không hợp lệ.";
            return;
        }

        if (!ValidatePhone(employee.SoDienThoai))
        {
            errorMessage = "Số điện thoại không hợp lệ.";
            return;
        }

        // Kiểm tra email và số điện thoại có trùng trong danh sách không khi tạo mới
        if (employee.MaNhanVien == 0)
        {
            if (IsEmailDuplicated(employee.Email))
            {
                errorMessage = "Email này đã tồn tại.";
                return;
            }

            if (IsPhoneNumberDuplicated(employee.SoDienThoai))
            {
                errorMessage = "Số điện thoại này đã tồn tại.";
                return;
            }
        }
        else
        {
            // Khi cập nhật, bỏ qua việc kiểm tra trùng cho nhân viên hiện tại
            if (IsEmailDuplicatedForUpdate(employee.Email, employee.MaNhanVien))
            {
                errorMessage = "Email này đã tồn tại.";
                return;
            }

            if (IsPhoneNumberDuplicatedForUpdate(employee.SoDienThoai, employee.MaNhanVien))
            {
                errorMessage = "Số điện thoại này đã tồn tại.";
                return;
            }
        }

        // Thực hiện lưu hoặc cập nhật nhân viên
        try
        {
            if (employee.MaNhanVien == 0)
            {
                // Thêm nhân viên mới
                var createdEmployee = await nvservice.SaveAsync("https://localhost:44359/api/NhanVien/CreateNhanVien", employee);
                if (createdEmployee != null)
                {
                    successMessage = "Nhân viên đã được thêm thành công!";
                    employee = new NhanVien(); // Reset form
                }
                else
                {
                    errorMessage = "Lỗi khi thêm nhân viên.";
                }
            }
            else
            {
                // Cập nhật nhân viên
                var updatedEmployee = await nvservice.UpdateAsync("https://localhost:44359/api/NhanVien/UpdateNhanVien/", employee.MaNhanVien, employee);
                if (updatedEmployee != null)
                {
                    successMessage = "Nhân viên đã được cập nhật thành công!";
                }
                else
                {
                    errorMessage = "Lỗi khi cập nhật nhân viên.";
                }
            }

            // Tải lại danh sách nhân viên sau khi thêm hoặc cập nhật thành công
            
        }
        catch (Exception ex)
        {
            successMessage = "Nhân viên đã được thêm thành công!";
        }
        await LoadEmployees();
        StateHasChanged();
    }

    // Delete employee
    private async Task DeleteEmployees()
    {
        try
        {
           /* var employeesReservations = bills.Where(h => h.MaNhanVien == employeesIdToDelete);
             if (employeesReservations.Any())
             {
                 // Nếu khách hàng có đặt phòng, hiển thị thông báo không thể xóa
                 errorMessage = "không xóa được nhân viên";
                 successMessage = null; // Xóa thông báo thành công nếu có lỗi
                 showDeleteConfirmation = false; // Ẩn bảng xác nhận
                 StateHasChanged(); // Cập nhật giao diện
                 return; // Dừng việc xóa khách hàng
             }*/
            await nvservice.DeleteAsync("https://localhost:44359/api/NhanVien/DeleteNhanVien/", employeesIdToDelete);
            await LoadEmployees();
            showDeleteConfirmation = false; // Ẩn bảng xác nhận
            successMessage = "Xóa nhân viên thành công."; // Thông báo thành công
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Không thể xóa nhân viên: " + ex.Message; // Hiển thị thông báo lỗi
            showDeleteConfirmation = false; // Ẩn bảng xác nhận
            StateHasChanged();
        }
    }

    private void ShowDeleteConfirmation(int id)
    {
        employeesIdToDelete = id; // Lưu lại ID khách hàng cần xóa
        showDeleteConfirmation = true; // Hiển thị bảng xác nhận
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false; // Ẩn bảng xác nhận
        StateHasChanged();
    }


    // Edit employee
    private void EditEmployees(NhanVien employeeToEdit)
    {
        employee = new NhanVien
            {
                MaNhanVien = employeeToEdit.MaNhanVien,
                HoTen = employeeToEdit.HoTen,
                SoDienThoai = employeeToEdit.SoDienThoai,
                Email = employeeToEdit.Email,
                DiaChi = employeeToEdit.DiaChi,
                Password = employeeToEdit.Password
            };
        successMessage = string.Empty;
        errorMessage = string.Empty;
    }

    private void PaginateEmployees()
    {
        // Sử dụng danh sách gốc employees cho việc phân trang
        filteredEmployees = employees
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage)
            .ToList();
    }

    // Validate email
    private bool ValidateEmail(string email)
    {
        if (string.IsNullOrEmpty(email) || !System.Text.RegularExpressions.Regex.IsMatch(email, emailPattern))
        {
            emailError = "Invalid email format.";
            return false;
        }
        emailError = null;
        return true;
    }

    // Validate phone number
    private bool ValidatePhone(string phone)
    {
        if (string.IsNullOrEmpty(phone) || !System.Text.RegularExpressions.Regex.IsMatch(phone, phonePattern))
        {
            phoneError = "Phone number must be 10 digits.";
            return false;
        }
        phoneError = null;
        return true;
    }

    // Kiểm tra email có trùng cho việc cập nhật (bỏ qua nhân viên hiện tại)
    private bool IsEmailDuplicatedForUpdate(string email, int currentEmployeeId)
    {
        return employees.Any(emp => emp.Email.Equals(email, StringComparison.OrdinalIgnoreCase) && emp.MaNhanVien != currentEmployeeId);
    }

    // Kiểm tra số điện thoại có trùng cho việc cập nhật (bỏ qua nhân viên hiện tại)
    private bool IsPhoneNumberDuplicatedForUpdate(string phoneNumber, int currentEmployeeId)
    {
        return employees.Any(emp => emp.SoDienThoai.Equals(phoneNumber, StringComparison.OrdinalIgnoreCase) && emp.MaNhanVien != currentEmployeeId);
    }


    // Kiểm tra email có trùng trong danh sách hay không
    private bool IsEmailDuplicated(string email)
    {
        return employees.Any(emp => emp.Email.Equals(email, StringComparison.OrdinalIgnoreCase));
    }

    // Kiểm tra số điện thoại có trùng trong danh sách hay không
    private bool IsPhoneNumberDuplicated(string phoneNumber)
    {
        return employees.Any(emp => emp.SoDienThoai.Equals(phoneNumber, StringComparison.OrdinalIgnoreCase));
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            PaginateEmployees();
            StateHasChanged(); // Cập nhật UI
        }
    }


    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            PaginateEmployees();
            StateHasChanged(); // Cập nhật UI
        }
    }

    protected async Task LoadBills()
    {


        bills = await BillService.GetAllAsync("https://localhost:44359/api/Bills/GetBills");

    }

    protected override void OnInitialized()
    {
        Console.WriteLine("Authors - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Authors - OnInitializedAsync");

        employee = new NhanVien();
        await LoadEmployees();
        //authorList = await authorService.GetAuthors();

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Authors - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Authors - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("Authors - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            //LoadReservations();
            //LoadEmployees();
            //LoadMethods();
            await LoadEmployees();

            isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("Authors - Dispose");
    }
}

