@page "/bills/details"
@using Hotel_App.Service
@using Hotel_App.Data
@using Blazored.LocalStorage
@using Hotel_App.Shared
@using System;
@using Microsoft.JSInterop
@using System.Globalization
@using Newtonsoft.Json
@inject HotelService<HoaDon> BillService
@inject HoaDonService CTHoaDonService
@inject HotelService<CTHoaDon> cthdservice;
@inject HotelService<KhachHang> khservice;
@inject HotelService<Phong> pservice;
@inject HotelService<LoaiPhong> lpservice;
@inject RoomService rservice;
@inject HotelService<DichVu> dvservice;
@inject HotelService<TaiKhoan> nvservice;
@inject HotelService<DatPhong> dpservice;
@inject HotelService<PhuongThucThanhToan> ptservice;
@inject HotelService<Phong> phongservice;
@inject HotelService<LoaiPhong> lpservice;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager;
@inject Blazored.LocalStorage.ILocalStorageService localStorageService

<div class="col-12" id="billDetails">

    <h3>Bill details</h3>
    <SpinLoader IsLoading="isLoading">
        <LoadingTemplate>
            <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                <br /><br />
                <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            @if (bill == null || nhanVien == null)
            {
                <p>No bill found.</p>
            }
            else
            {


                <tr>
                    <th>Mã hóa đơn:</th>
                    <td>@bill.MaHoaDon</td>
                    <th>   &nbsp;	Mã đặt phòng:</th>
                    <td>          &nbsp;	@datPhong.MaDatPhong</td>
                </tr>
                <tr>
                    <th>Ngày tạo:</th>
                    <td>@bill.NgayTao</td>
                    <th>   &nbsp;	Ngày check in:</th>
                    <td>          &nbsp;	@datPhong.CheckInDate</td>
                </tr>
                <tr>
                    <th>Mã phương thức</th>
                    <td>@pt.TenPhuongThuc</td>

                    <th>   &nbsp;	Ngày check out:</th>
                    <td>          &nbsp;	@datPhong.CheckOutDate</td>
                </tr>
                <tr>
                    <th>Nhân viên</th>
                    <td>@nhanVien.HoTen</td>
                    <th>   &nbsp;	Khách hàng:</th>
                    <td>          &nbsp;	@kh.HoTen</td>
                        </tr>
                        <br />
                <table class ="table table-bordered table-striped table-responsive-md">
                    <thead>
                        <tr>
                            <th>Mã dịch vụ</th>
                            <th>Tên dịch vụ</th>
                            <th>Đơn giá</th>
                            <th>Số lượng</th>
                            <th>Tổng tiền</th>
                            <th>Hành động</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td></td>
                            <td>@loaiPhong.TenLoaiPhong</td>
                            <td><i>@FormatMoney(@loaiPhong.Gia) VND</i></td>
                            <td>@rent ngày</td>
                            <td>@FormatMoney(@datPhong.TongTien) VND</td>
                        </tr>
                        @foreach (var cthd in bill.CTHoaDon)
                        {
                            <tr>
                                <td>@cthd.MaDichVu</td>
                                <td>@cthd.dv.TenDichVu</td>
                                <td>@FormatMoney(@cthd.dv.Gia) VND</td>
                                <td><input style="width:50px" type="number" @bind-value="@cthd.SoLuong" /></td>
                                <td>@FormatMoney(@cthd.TongTien) VND</td>
                                <td>
                                    <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => EditBillDetail(bill.MaHoaDon,cthd.dv.MaDichVu,cthd.SoLuong))">Edit</a>
                                    <a style="text-underline-position:below; cursor:pointer; color:red" @onclick="(() => DeleteBillDetail(cthd.Macthd))">Delete</a> |
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                <b>Tổng tiền: </b> <a>@FormatMoney(@bill.TongSoTien) VND</a>
            }
        </ContentTemplate>
    </SpinLoader>
     <hr />

    <button class="btn btn-primary" @onclick="() => NavigateToBillDetails(bill.MaHoaDon)">Print Bill</button>

</div>
<div class="col-12">
    <EditForm Model="@cthd" OnValidSubmit="@SaveDetail">

        <div class="form-group">
            <label for="MaHoaDon">Mã Hóa Đơn:</label>
            <input type="text" class="form-control" value="@BillId" name="MaHoaDon" readonly>
        </div>
        <div class="form-group">
            <label for="MaDichVu">Mã dịch vụ:</label>
            <select class="form-control" id="MaDichVu" @bind="cthd.MaDichVu" name="MaDichVu">
                <option>Chọn dịch vụ</option>
                @if (dvlist != null)
                {
                    @foreach (var datPhong in dvlist)
                    {
                        <option value="@datPhong.MaDichVu">
                            @datPhong.TenDichVu
                        </option>
                    }
                }
            </select>
        </div>

        <div class="form-group">
            <label for="Số lượng">Số lượng</label>
            <input type="number" class="form-control" @bind="cthd.SoLuong" />
        </div>


        <button type="submit" class="btn btn-primary">Thêm</button>

    </EditForm>

</div>
<style>
    .tooltiptext {
        visibility: hidden;
        width: 120px;
        background-color: #555;
        color: #fff;
        text-align: center;
        border-radius: 6px;
        padding: 5px 0;
        position: absolute;
        z-index: 1;
    }

    .tooltip:hover .tooltiptext {
        visibility: visible;
    }
</style>

@code {
    [Parameter]
    public int BillId { get; set; }
    public TaiKhoan nhanVien { get; set; }
    public DatPhong datPhong { get; set; }
    public HoaDon bill { get; set; }
    public DichVu dichVu { get; set; }
    public CTHoaDon cthd { get; set; }
    public KhachHang kh { get; set; }
    public Phong room { get; set; }
    public LoaiPhong loaiPhong { get; set; }
    public int rent{ get; set; }
    public IEnumerable<DichVu> dvlist { get; set; }
    public PhuongThucThanhToan pt { get; set; }
    public IEnumerable<CTHoaDon> cthdlist { get; set; }
    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public bool IsGridViewFiltered { get; set; }
    public int newQuantity { get; set; }
    bool isLoading = true;

    protected async override Task OnInitializedAsync()
    {
        cthd = new CTHoaDon();
        GetAllServices();

        isLoading = true;
        await GetBill();
        await GetDetails();

        if (bill != null)
        {
            cthdlist = await CTHoaDonService.GetCTHoaDonByMaHoaDon(bill.MaHoaDon);
        }

        isLoading = false;
        StateHasChanged();

    }
    protected async Task GetBill()
    {
        bill = new HoaDon();
        var storedUserData = await localStorageService.GetItemAsync<string>("billData");
        if (storedUserData != null)
        {
            var temp = JsonConvert.DeserializeObject<HoaDon>(storedUserData);
            if (bill.MaHoaDon != temp.MaHoaDon)
            {
                bill = await BillService.GetByIdAsync("https://localhost:44359/api/Bills/details/{0}", temp.MaHoaDon);
            }

        }
    }

    protected async Task GetDetails()
    {
        datPhong = await dpservice.GetByIdAsync("https://localhost:44359/api/DatPhong/GetByID/{0}", bill.MaDatPhong);
        nhanVien = await nvservice.GetByIdAsync("https://localhost:44359/api/TaiKhoan/GetByID/{0}", bill.MaTaiKhoan);
        pt = await ptservice.GetByIdAsync("https://localhost:44359/api/PTTT/GetByID/{0}", bill.MaPhuongThuc);
        kh = await khservice.GetByIdAsync("https://localhost:44359/api/Customers/GetByID/{0}", datPhong.MaKhachHang);
        room = await pservice.GetByIdAsync("https://localhost:44359/api/Room/GetRoomDetails/{0}", datPhong.MaPhong);
        loaiPhong = await lpservice.GetByIdAsync("https://localhost:44359/api/RoomTypes/GetRoomType/{0}", room.LoaiPhong.MaLoaiPhong);
        TimeSpan duration = datPhong.CheckOutDate - datPhong.CheckInDate;

        rent = (int)duration.TotalDays;



    }
    public string FormatMoney(decimal amount)
    {
        NumberFormatInfo numberFormatInfo = new NumberFormatInfo();
        numberFormatInfo.NumberGroupSeparator = ",";

        return amount.ToString("N", numberFormatInfo);
    }
    protected async Task GetAllServices()
    {
        dvlist = await dvservice.GetAllAsync("https://localhost:44359/api/DichVu/GetAll");
    }
    protected async Task UpdateTongTien()
    {

        decimal sum = 0;
        await ReloadDetails();

        foreach (var cthd in bill.CTHoaDon)
        {
            sum += cthd.TongTien;
        }
        decimal newPrice = rent * loaiPhong.Gia;
        sum += datPhong.TongTien;
        await rservice.UpdateTotal(datPhong.MaDatPhong, newPrice);
        await CTHoaDonService.UpdateTotal(BillId, sum);
        StateHasChanged();
        await ReloadDetails();

    }
    protected async Task ReloadDetails()
    {
        await GetBill();
        StateHasChanged();
    }
    private async Task DeleteBillDetail(int Id)
    {
        await cthdservice.DeleteAsync("https://localhost:44359/api/BillDetails/DeleteBillDetail/", Id);
        // LoadBills();
        await ReloadDetails();

        StateHasChanged();
        //throw new Exception("DeleteAuthor");
    }
    private async Task EditBillDetail(int billID, int Id, int newQuantity)
    {
        await CTHoaDonService.UpdateQuantity(billID, Id, newQuantity);
        // LoadBills();
        await UpdateTongTien();
        await ReloadDetails();
        //throw new Exception("DeleteAuthor");
    }
    private async Task HandleQuantityChange(CTHoaDon cthd)
    {
        // Update cthd.SoLuong with the new value
        newQuantity = cthd.SoLuong;
        // Trigger a re-render or update the database as needed
        await ReloadDetails();
    }
    private async Task SaveDetail()
    {
        dichVu = await dvservice.GetByIdAsync("https://localhost:44359/api/DichVu/GetById/{0}", cthd.MaDichVu);
        cthd.MaHoaDon = BillId;

        foreach (var ct in bill.CTHoaDon)
        {
            if (ct.dv.MaDichVu == dichVu.MaDichVu)
            {
                await EditBillDetail(BillId, dichVu.MaDichVu, ct.SoLuong + cthd.SoLuong);
                // Update the bill list
                await ReloadDetails();
                // Clear the form
                await UpdateTongTien();
                cthd = new CTHoaDon();
                return;
            }
            else continue;
        }
        //   cthd.hd = bill;
        //       cthd.dv.cthds = [];
        CTHoaDon savedBill = await cthdservice.SaveAsync("https://localhost:44359/api/BillDetails/CreateBillDetail", cthd);
        if (savedBill != null)
        {
            // Display success message using a modal or dialog
            //  await _modalService.Show<SuccessMessage>("Bill created successfully!");

            // Update the bill list
            await ReloadDetails();
            // Clear the form
            cthd = new CTHoaDon();
        }

    }
    private async Task PrintBillDetails()
    {
        await JSRuntime.InvokeVoidAsync("printComponent", "#billDetails");
    }
    private void NavigateToBillDetails(int billId)
    {
        NavigationManager.NavigateTo($"/bills/details/print/{billId}");
    }
}
