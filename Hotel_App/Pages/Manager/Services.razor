@page "/services-management"
@using Hotel_App.Service
@using Hotel_App.Data
@using Blazored.LocalStorage
@using Hotel_App.Shared
@inject HotelService<DichVu> dvservice;
@implements IDisposable


<div class="col-12">
    <h3><b>Thông tin dịch vụ</b></h3>
    <hr />
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">@successMessage</div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }
    <EditForm Model="@dichVu" OnValidSubmit="@CreateService">
        <div class="form-group">
            <label for="MaDichVu">Mã Dịch Vụ:</label>
            <input type="text" class="form-control" @bind="dichVu.MaDichVu" name="MaDichVu" readonly>
        </div>

        <div class="form-group">
            <label for="TenDichVu">Tên Dịch Vụ</label>
            <input type="text" class="form-control" @bind="dichVu.TenDichVu" name="TenDichVu" />

        </div>

        <div class="form-group">
            <label for="Gia">Giá</label>
            <input type="text" class="form-control" @bind="dichVu.Gia" name="Gia" />

        </div>

        <div class="form-group">
            <label for="Mota">Mô Tả</label>
            <input type="text" class="form-control" @bind="dichVu.Mota" name="Mota" />
        </div>

        <button type="submit" class="btn btn-primary">Tạo</button>
    </EditForm>
</div>
<br />
<div class="col-12">

    <h3>DỊCH VỤ <button class="btn btn-primary" @onclick="LoadServices">Refresh</button></h3>
    <SpinLoader IsLoading="isLoading">
        <LoadingTemplate>
            <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                <br /><br />
                <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            @if (services == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <table class="table table-bordered table-striped table-responsive-md">
                    <thead>
                        <tr>
                            <th>Mã Dịch Vụ</th>
                            <th>Tên Dịch Vụ</th>
                            <th>Giá</th>
                            <th>Mô Tả</th>
                            <th>Hành động</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var dichvu in services)

                        {
                            <tr>
                                <td>@dichvu.MaDichVu</td>
                                <td>@dichvu.TenDichVu</td>
                                <td>@dichvu.Gia</td>
                                <td>@dichvu.Mota</td>
                                <td>
                                    <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => EditService(dichvu))">Edit</a> |
                                    <a style="text-underline-position:below; cursor:pointer; color:blue" @onclick="(() => DeleteService(dichvu.MaDichVu))">Delete</a>
                                </td>
                                
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </ContentTemplate>
    </SpinLoader>

</div>



@code {

    private IEnumerable<DichVu> services;
    public DichVu dichVu { get; set; }
    public IEnumerable<DichVu> filteredServiceList { get; set; }

    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = true;

    // Success and error messages for operations
    private string successMessage;
    private string errorMessage;


    protected async Task LoadServices()
    {
        isLoading = true;

        services = await dvservice.GetAllAsync("https://localhost:44359/api/DichVu/GetAll");
        isLoading = false;
    }

    protected override void OnInitialized()
    {
        Console.WriteLine("Authors - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Authors - OnInitializedAsync");
        dichVu = new DichVu();
        await LoadServices();
        //authorList = await authorService.GetAuthors();

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Authors - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Authors - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("Authors - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Authors - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            // LoadReservations();
            // LoadEmployees();
            // LoadMethods();
            await LoadServices();

            isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("Authors - Dispose");
    }

    // Delete employee
    private async Task DeleteService(int id)
    {
        try
        {
            await dvservice.DeleteAsync("https://localhost:44359/api/DichVu/DeleteDichVu/", id);
            successMessage = "Service deleted successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = "Error deleting service: " + ex.Message;
        }
        await LoadServices();
    }

    private async Task CreateService()
    {
        // Call the service to save the bill
        try
        {
            if (dichVu.cthds == null) dichVu.cthds = [];
            if (dichVu.MaDichVu == 0)
            {
                //  bill.CTHoaDon = null;
                var savedService = await dvservice.SaveAsync("https://localhost:44359/api/DichVu/CreateDichVu", dichVu);
                if (savedService != null)
                {
                    // Display success message using a modal or dialog
                    //  await _modalService.Show<SuccessMessage>("Bill created successfully!");

                    // Update the bill list
                    StateHasChanged();

                    // Clear the form
                    dichVu = new DichVu();
                    successMessage = "Service create successfully!";
                }

            }
            else
            {
                var savedService = await dvservice.UpdateAsync("https://localhost:44359/api/DichVu/UpdateDichVu/", dichVu.MaDichVu, dichVu);
                // Update the bill list
                StateHasChanged();

                // Clear the form
                dichVu = new DichVu();
                successMessage = "Service update successfully!";

            }
            await ReloadServices();
            // Handle successful save, e.g., display success message, clear form, etc.
        }
        catch (Exception ex)
        {
            // Handle errors, e.g., display error message to the user
            Console.Error.WriteLine("Error saving service: " + ex.Message);
        }

    }

    private void EditService(DichVu savedService)
    {
        dichVu = savedService;
        StateHasChanged();

    }
    private async Task ReloadServices()
    {
        services = await dvservice.GetAllAsync("https://localhost:44359/api/DichVu/GetAll");

    }

}